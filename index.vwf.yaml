--- 
extends: http://vwf.example.com/scene.vwf
properties:
  # keyPressInfo:
  makeOwnAvatarVisible: true
  moveSpeed: 1.0
  usersShareView: false
  userObject:
    extends: player.vwf
    implements: [ "http://vwf.example.com/navigable.vwf" ]
    properties:
      translationSpeed: 100
      color: 
      navmode: walk
      translation: [250, 0, 0]
    children:
      camera:
        extends: http://vwf.example.com/camera.vwf
        properties:
          translation: [ 250, 0, 600 ]
          rotation: [1, 0, 0, -90]
          far: 1000000
          near: 1
      avatar:
        extends: http://vwf.example.com/node3.vwf
        source: ball.dae
        type: model/vnd.collada+xml
        children:
          material:
            extends: http://vwf.example.com/material.vwf
            properties:
              color: "#0000ff"
    scripts:
    - |
        this.transformChanged = function (){
          console.log("I worked!");
        }
        //@ sourceURL=transformedChanged.vwf    
children:
  board:
    extends: http://vwf.example.com/node3.vwf
    source: board.dae
    properties:
      xPos: 0
      yPos: 0
      scale: 40
  light:
    extends: http://vwf.example.com/light.vwf
    properties:
      distance: 2000
      translation: [ 400, -400, 900 ]
  enemy:
    extends: http://vwf.example.com/node3.vwf
    source: SlothCubert2.dae
    properties:
      translation: [ 125, 0, 0 ]
events:
  keyDown:
methods:
  initializeCamera:
  initializeEnemy:
  calculateEnemyMovement:
  calculateClosestPlayer:
  enemyHitsPlayer:
  findPlayers:
scripts:
- |
    this.initialize = function() {
      this.future( 0 ).initializeCamera();
      this.future( 0 ).initializeEnemy();
    }

    this.keyDown = function(states){
      console.log(states);
    }

    this.initializeCamera = function() {
      this.camera.translation = [ 250, 0, 600 ];
      this.camera.rotation = [ 1, 0, 0, -90 ];

      // Disable navigation
      this.camera.touchmode = "none";
      this.camera.navmode = "none";
    }

    this.initializeEnemy = function(){
      var closestPlayer = this.calculateClosestPlayer();
      this.calculateEnemyMovement(closestPlayer);
    }

    this.findPlayers = function() {
      return this.find("./element(*,'http://vwf.example.com/navigable.vwf')");
    }

    this.calculateClosestPlayer = function(){
      var closestPlayer;
      var currentDistance;
      var shortestDistance = 99999;
      var xDistance, yDistance;
      var listOfPlayers = this.findPlayers();

      if(listOfPlayers){
        for(var i = 0; i < listOfPlayers.length; i++){
          xDistance = this.enemy.translation[0] - listOfPlayers[i].translation[0];
          yDistance = this.enemy.translation[1] - listOfPlayers[i].translation[1];

          currentDistance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2))
          if(currentDistance < shortestDistance){
            shortestDistance = currentDistance;
            closestPlayer = listOfPlayers[i];
          }
        }
        return closestPlayer;
      }
      return undefined;
    }

    this.enemyHitsPlayer = function (closestPlayer){
      console.log("The enemy hit");
      console.log(closestPlayer);  
    }

    this.calculateEnemyMovement = function(closestPlayer) {
      if(!closestPlayer){
        closestPlayer = this.calculateClosestPlayer();
      }
      else{
        var xDistance = this.enemy.translation[0] - closestPlayer.translation[0];
        var yDistance = this.enemy.translation[1] - closestPlayer.translation[1];

        var distance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2))

        //Checks to see if the enemy needs to move
        if(distance < 10){      
          this.enemyHitsPlayer(closestPlayer);  
        }
        else if(xDistance != 0 || yDistance != 0){
          //Checks what direction it needs to move in
          if(Math.abs(xDistance) > Math.abs(yDistance)){
            if(xDistance < 0){
              this.enemy.translateBy([this.moveSpeed, 0, 0]);
            }
            else{
              this.enemy.translateBy([-this.moveSpeed, 0 ,0]);
            }
          }
          else{
            if(yDistance < 0){
              this.enemy.translateBy([0, this.moveSpeed, 0]);
            }
            else{
              this.enemy.translateBy([0, -this.moveSpeed, 0]);
            }
          }   
        }
      }

      this.future( 1.0/60.0 ).calculateEnemyMovement(closestPlayer);
    }

