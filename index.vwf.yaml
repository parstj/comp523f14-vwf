--- 
extends: http://vwf.example.com/scene.vwf
properties:
<<<<<<< HEAD
  ambientColor: [255, 255, 255]
  moveSpeed: 1.0
  makeOwnAvatarVisible: true
  usersShareView: false
  userObject:
    extends: http://vwf.example.com/node3.vwf
    implements: [ "http://vwf.example.com/navigable.vwf" ]
    properties:
      translationSpeed: 100
      rotationSpeed: 0
      health: 100
      numTimesDead: 0
      #color: 
      navmode: walk
      lookmode: none
=======
  # keyPressInfo:
  makeOwnAvatarVisible: true
  moveSpeed: 2.5
  usersShareView: false
  userObject:
    extends: player.vwf
    implements: [ "http://vwf.example.com/navigable.vwf" ]
    properties:
      translationSpeed: 1000
      color: 
      navmode: walk
>>>>>>> ab58ac381caf37e2e27b00e3455570c0ecbb769c
      translation: [250, 0, 0]
    children:
      camera:
        extends: http://vwf.example.com/camera.vwf
        properties:
          translation: [ 250, 0, 600 ]
          rotation: [1, 0, 0, -90]
          far: 1000000
          near: 1
      avatar:
        extends: http://vwf.example.com/node3.vwf
<<<<<<< HEAD
        source: ball.dae
        type: model/vnd.collada+xml
        children:
          material:
            extends: http://vwf.example.com/material.vwf
            properties:
              color: "#00ffff"
    scripts:
    - |
        this.transformChanged = function (){
          var myTranslation = this.translation;
          if(myTranslation[0] > 1000){
            myTranslation[0] = 1000;
          }
          else if(myTranslation[0] < -1000){
            myTranslation[0] = -1000;
          }
          if(myTranslation[1] > 1000){
            myTranslation[1] = 1000;
          }
          else if(myTranslation[1] < -1000){
            myTranslation[1] = -1000;
          }
          console.log("x: " + myTranslation[0] + " y: " + myTranslation[1]);
        }
        //@ sourceURL=transformedChanged.vwf    
=======
        source: SlothCubert2.dae
        properties:
          rotation: [-1, 0, 0, 90]
          translation: [230, -15, 0]
          scale: 4
              
>>>>>>> ab58ac381caf37e2e27b00e3455570c0ecbb769c
children:
  board:
    extends: http://vwf.example.com/node3.vwf
    source: boardlarge.dae 
    properties:
      xPos: 0
      yPos: 0
<<<<<<< HEAD
  enemy:
    extends: http://vwf.example.com/node3.vwf
    source: SlothTrans.dae
    properties:
      #translation: [ 0, 0, 0 ]
      rotation: [-1, 0 , 0 , 90]
      alpha: 0
      scale: 4 
events:
  keyDown:
methods:
  initializeEnemy:
  calculateEnemyMovement:
  calculateClosestPlayer:
  enemyHitsPlayer:
  playerDied:
=======
  light:
    extends: http://vwf.example.com/light.vwf
    properties:
      distance: 2000
      translation: [ 400, -400, 900 ]
  enemy:
    extends: http://vwf.example.com/node3.vwf
    source: ball.dae
    children:
      material:
        extends: http://vwf.example.com/material.vwf
        properties:
          color: "#ff3333"
    properties:
      translation: [ 125, 0, 0 ]

methods:
  initializeCamera:
  initializeEnemy:
  calculateEnemyMovement:
  calculateClosestPlayer:
>>>>>>> ab58ac381caf37e2e27b00e3455570c0ecbb769c
  findPlayers:
scripts:
- |
    this.initialize = function() {
<<<<<<< HEAD
      this.future( 0 ).initializeEnemy();
    }

    this.initializeEnemy = function(){
      var closestPlayer = this.calculateClosestPlayer();
      this.calculateEnemyMovement(closestPlayer);
    }
=======
      this.future( 0 ).initializeCamera();
      this.future( 0 ).initializeEnemy();
    }

    this.initializeCamera = function() {
      this.camera.translation = [ 250, 0, 600 ];
      this.camera.rotation = [ 1, 0, 0, -90 ];
>>>>>>> ab58ac381caf37e2e27b00e3455570c0ecbb769c

    this.findPlayers = function() {
      return this.find("./element(*,'http://vwf.example.com/navigable.vwf')");
    }

<<<<<<< HEAD
=======
    this.initializeEnemy = function(){
      var closestPlayer = this.calculateClosestPlayer();
      this.calculateEnemyMovement(closestPlayer);
    }

    this.findPlayers = function() {
      console.log(this.find("./element(*,'http://vwf.example.com/navigable.vwf')"));
      return this.find("./element(*,'http://vwf.example.com/navigable.vwf')");
    }

>>>>>>> ab58ac381caf37e2e27b00e3455570c0ecbb769c
    this.calculateClosestPlayer = function(){
      var closestPlayer;
      var currentDistance;
      var shortestDistance = 99999;
      var xDistance, yDistance;
      var listOfPlayers = this.findPlayers();

      if(listOfPlayers){
        for(var i = 0; i < listOfPlayers.length; i++){
          xDistance = this.enemy.translation[0] - listOfPlayers[i].translation[0];
          yDistance = this.enemy.translation[1] - listOfPlayers[i].translation[1];

          currentDistance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2))
          if(currentDistance < shortestDistance){
            shortestDistance = currentDistance;
            closestPlayer = listOfPlayers[i];
          }
        }
        return closestPlayer;
      }
      return undefined;
    }

<<<<<<< HEAD
    this.enemyHitsPlayer = function (closestPlayer){
      closestPlayer.health = closestPlayer.health - 1;
      if(closestPlayer.health <= 0){
        playerDied(closestPlayer);
      }
      console.log(closestPlayer.health);  
    }

    this.playerDied = function (closestPlayer){
      closestPlayer.translateTo( [0, 0, 0]);
      closestPlayer.numTimesDead = closestPlayer.numTimesDead + 1;
      closestPlayer.health = 100;
      console.log("A player has been killed");
    }

    this.calculateEnemyMovement = function(closestPlayer) {
      if(!closestPlayer){
        closestPlayer = this.calculateClosestPlayer();
      }
      else{
        var xDistance = this.enemy.translation[0] - closestPlayer.translation[0];
        var yDistance = this.enemy.translation[1] - closestPlayer.translation[1];

        var distance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2))

        //Checks to see if the enemy needs to move
        if(distance < 10){      
          this.enemyHitsPlayer(closestPlayer);  
        }
        else if(xDistance != 0 || yDistance != 0){
          //Checks what direction it needs to move in
          if(Math.abs(xDistance) > Math.abs(yDistance)){
            if(xDistance < 0){
              this.enemy.translateBy([this.moveSpeed, 0, 0]);
            }
            else{
              this.enemy.translateBy([-this.moveSpeed, 0 ,0]);
            }
          }
          else{
            if(yDistance < 0){
              this.enemy.translateBy([0, this.moveSpeed, 0]);
            }
            else{
              this.enemy.translateBy([0, -this.moveSpeed, 0]);
            }
          }   
        }
      }

      this.future( 1.0/60.0 ).calculateEnemyMovement(closestPlayer);
    }

=======
    this.calculateEnemyMovement = function(closestPlayer) {
      if(!closestPlayer){
        closestPlayer = this.calculateClosestPlayer();
      }
      else{
        var xDistance = this.enemy.translation[0] - closestPlayer.translation[0];
        var yDistance = this.enemy.translation[1] - closestPlayer.translation[1];

        //Checks to see if the enemy needs to move
        if(xDistance != 0 || yDistance != 0){
          //Checks what direction it needs to move in
          if(Math.abs(xDistance) > Math.abs(yDistance)){
            if(xDistance < 0){
              this.enemy.translateBy([this.moveSpeed, 0, 0]);
            }
            else{
              this.enemy.translateBy([-this.moveSpeed, 0 ,0]);
            }
          }
          else{
            if(yDistance < 0){
              this.enemy.translateBy([0, this.moveSpeed, 0]);
            }
            else{
              this.enemy.translateBy([0, -this.moveSpeed, 0]);
            }
          }   
        }
      }

      this.future( 1.0/60.0 ).calculateEnemyMovement(closestPlayer);
    }

>>>>>>> ab58ac381caf37e2e27b00e3455570c0ecbb769c
